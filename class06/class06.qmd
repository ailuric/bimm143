---
title: "class06 R functions"
author: "amy (pid A16962111)"
date: 1/25/24
format: pdf
---

## R functions

Functions are how we get stuff done. We call functions to do everything useful in R.

One cool thing about R is that it makes writing your own functions comparatively easy.

All functions in R have at least three things:

\- a **name** (we get to pick this)

\- one or more **input arguments**

\- the **body** (lines of code that do the work)

```{r funname}
funname <- function() {
  # The body with R code
}
```

Let's write a silly first function to add two numbers:

```{r}
x <- 5
y <- 1
x + y
```

```{r}
addme <- function(x, y=1) {
  x + y
}
```

```{r}
addme(100,100)
```

```{r}
addme(10)
```

## lab for today

```{r}
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

```{r}
mean(student1)
mean(student2, na.rm = TRUE)
mean(student3, na.rm = TRUE)
```

This is not fair - there is no way that student 3 should have a mean of 90.

We also want to let students drop their lowest grade.

How do I remove the lowest score?

```{r}
min(student1)
```

I found the `which.min` function. Maybe this is more useful?

```{r}
which.min(student1)
```

Cool - the eighth element of the vector has the lowest score. Can I remove this one?

```{r}
mean(student1[-which.min(student1)])
```

We still have the problem of missing values.

One idea is to replace NA values with zero.

```{r}
y <- c(1, 2, 3, 4, 5)
y[y==3] <- 0
y
```

```{r}
x <- student2

# change NA values to zero
x[is.na(x)] <- 0
# find and remove lowest score, and find the mean
mean(x[-which.min(x)])
```

Last step is take make the `grade()` function.

```{r}
grade <- function(x) {
  # change NA values to zero
  x[is.na(x)] <- 0
  # find and remove lowest score, and find the mean
  mean(x[-which.min(x)])  
}
```

```{r}
grade(student3)
```

Now read the online gradebook.

```{r}
url <- "https://tinyurl.com/gradeinput"
gradebook <- read.csv(url, row.names = 1)
head(gradebook)
```

Grade the students.

```{r}
results <- apply(gradebook, 1, grade)
results
```

Who is the top-scoring student?

```{r}
which.max(results)
```

Which homework was the hardest?

```{r}
which.min(apply(gradebook, 2, sum, na.rm=T))
```

Which homework was most predictive of overall score?

```{r}
#mask NAs as zeros
gradebook[is.na(gradebook)] <- 0
```

We can use the `cor()` function for correlation analysis, and use `apply()` to run the analysis over the whole course.

```{r}
apply(gradebook, 2, cor, results)
which.max(apply(gradebook, 2, cor, results))
```
