---
title: "class08 breast cancer mini project"
author: "amy (pid A16962111)"
format: pdf
editor: visual
---

# RNA seq analysis

Read the data.

```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```

> **Q**. How many genes and samples are in this data set?
>
> There are 100 genes.

```{r}
nrow(rna.data)
```

## run PCA

```{r}
## Again we have to take the transpose of our data 
pca <- prcomp(t(rna.data), scale=TRUE)
 
## Simple un polished plot of pc1 and pc2
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2")
```

```{r}
summary(pca)
```

```{r}
#we have 5 wt and 5 ko samples
mycols <- c(rep("blue",5), rep("red",5))
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", col=mycols)
```

I could examine which genes contribute the most to this first PC.

```{r}
head(sort(abs(pca$rotation[,1]), decreasing=T))
```

# mini project

Breast cancer biopsy data from Wisconsin

First we will read the data.

```{r}
# Save your input data file into your Project directory
fna.data <- "WisconsinCancer.csv"

# Complete the following code to input the data and store as wisc.df
wisc.df <- read.csv(fna.data, row.names=1)

head(wisc.df)
```

Note that the first column here `wisc.df$diagnosis` is a pathologist provided expert diagnosis.

```{r}
diagnosis <- as.factor(wisc.df$diagnosis)
```

Now I want to make sure I remove that column from my dataset for analysis.

```{r}
wisc.data <- wisc.df[,-1]
```

-   **Q1**. How many observations are in this dataset?

    There are 569 observations.

    ```{r}
    dim(wisc.data)
    ```

<!-- -->

-   **Q2**. How many of the observations have a malignant diagnosis?

    212 have a malignant diagnosis.

    ```{r}
    table(diagnosis)
    ```

-   **Q3**. How many variables/features in the data are suffixed with `_mean`?

    10 variables are suffixed with `_mean`.

    ```{r}
    length(grep("_mean", colnames(wisc.data)))
    ```

## principal component analysis

Here we will use `prcomp()` on the `wisc.data` object- the one without the diagnosis column.

First, we have to decide whether to use the `scale=TRUE` argument when we run `prcomp()`.

We can look at the means and sd of each column. If they are similar then we are all good to go, if not we should use `scale=TRUE`

```{r}
colMeans(wisc.data)
apply(wisc.data, 2, sd)
```

There are very different so we should `scale=TRUE`

```{r}
wisc.pr <- prcomp(wisc.data, scale=TRUE)
summary(wisc.pr)
```

-   **Q4**. From your results, what proportion of the original variance is captured by the first principal components (PC1)?

    44.27%

-   **Q5**. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

    3PCs capture 72.6% of the original variance

### plotting the PCA results

```{r}
#biplot(wisc.pr)
```

We need to make our own plot.

```{r}
attributes(wisc.pr)
```

```{r}
plot(wisc.pr$x[,1], wisc.pr$x[,2], col=diagnosis)
```

```{r}
library(ggplot2)
pc <- as.data.frame(wisc.pr$x)

ggplot(pc) +
  aes(PC1, PC2, col=diagnosis) +
  geom_point()
```

### communicating PCA results

-   **Q9.** For the first principal component, what is the component of the loading vector (i.e. `wisc.pr$rotation[,1]`) for the feature `concave.points_mean`?

    -0.2608538

    ```{r}
    wisc.pr$rotation["concave.points_mean",1]
    ```

<!-- -->

-   **Q10.** What is the minimum number of principal components required to explain 80% of the variance of the data?

    5 PCs

    ```{r}
    tbl <- summary(wisc.pr)
    which(tbl$importance[3,]>0.8)[1]
    ```

## hierarchical clustering

The main function for hierarchical clustering is `hclust()`. It takes a distance matrix as input.

```{r}
d <- dist(scale(wisc.data))
wisc.hclust <- hclust(d)
plot(wisc.hclust)
abline(h=19, col="red")
table(cutree(wisc.hclust, h=19))
```

## combining methods

Here we will perform clustering on our PCA results rather than the original data. In other words, we will cluster using `wisc.pr$x` - our new better variables or PCs. We can choose as many or as few PCs to use as we like. It is your call!

```{r}
d.pc <- dist(wisc.pr$x[,1:3])
wisc.pr.hclust <- hclust(d.pc, method="ward.D2")
plot(wisc.pr.hclust)
abline(h=80, col="red")
```

```{r}
grps <- cutree(wisc.pr.hclust, h=80)
table(grps)
```

We can use the `table()` function to make a cross table to compare our clusters with the expert diagnoses.

```{r}
table(diagnosis)
```

```{r}
table(grps, diagnosis)
```

B1 - false positives

B2 - accurate diagnoses of benign

M1 - accurate diagnoses of malignant

M2 - false negatives

Cluster 1 mostly captures malignant patients and cluster 2 mostly captures benign patients.

## predictions

```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```

```{r}
plot(wisc.pr$x[,1:2], col=grps)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```

-   **Q18.** Which of these new patients should we prioritize for follow up based on your results?

    Follow up with group 1, the cluster that mostly captures malignant cancers.
